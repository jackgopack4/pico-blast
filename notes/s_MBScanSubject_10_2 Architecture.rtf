{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10140\viewh10860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 ARCHITECTURE FOR s_MBScanSubject_10_2 algorithm\
\
1) Stream:\
	lookup table (via lookup_wrap pointer)\
	sequence structure (via subject pointer)\
	offset_pairs\
	max_hits value\
	scan_range value\
2) Hardcode: word length (10), word mask value (1048575)\
3) manipulate:\
	sequence structure to make s pointer (hardware shifter)\
4) decrement max hits value (shifter)\
5) skip asserts; this wastes time and is hard to do in FPGA\
6) check bits to see if divisible by 2 or four\
	multiplex based on this output, do +2 search, otherwise do +4 searches\
7) start while loop (unrolled by synthesizer)\
	8) shift bits with reversed s value, shift index again.\
	9) call MB_ACCESS_HITS()\
	10) increment scan_range\
	11) continue while loop (counter less than given value)\
 	(unrolled loop, should be done with synthesizer without much problem?)\
12) stream back total_hits value on completion\
\
\
ARCHITECTURE FOR MB_ACCESS_HITS()\
0) stream mb_lt, index values\
1) Mux for if(s_BlastMBLookupHasHits(mb_lt, index) (megablast lookup table and index val)\
2) s_BlastMBLookupHasHits algorithm\
	call PV_TEST on values from lookup table\
	PV_TEST is a shift/and structure, make hardware for it\
3) >= module for total_hits and max_hits, multiplexer (simulate break)\
4) increment total_hits with s_BlastMBLookupRetrieve algorithm\
5) s_BlastMBLookupRetrieve algorithm\
	while loop (counter)\
	declare hardware array offset_pairs\
	move/decrement values\
\
}